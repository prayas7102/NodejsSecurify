import colors from 'colors';
import natural from 'natural';

import { DatasetSample } from './DatasetSample';
import { removeRedundantData } from './DatasetUtils';
import { Vulnerability, toDatasetMap, detectedToStringMap, notDetectedToStringMap } from './VulnerabilityTypes';

export function detectVulnerability(kind: Vulnerability, codeSnippet: string): void {
    let isDetected: boolean = false;

    // Create a tokenizer.
    const tokenizer = new natural.WordTokenizer();
    const tokenizedSnippet = tokenizer.tokenize(codeSnippet) as readonly string[] | null;

    // Make prediction using the trained classifier.
    if (tokenizedSnippet !== null) {
        // Prepare the data for training.
        const dataset: readonly DatasetSample[] = toDatasetMap[kind];
        const cleanedDataset: readonly DatasetSample[] = removeRedundantData(dataset);

        const codeSamples: readonly string[] = cleanedDataset.map((sample) => sample.code);
        const labels: readonly number[] = cleanedDataset.map((sample) => sample.label);

        // Vectorize the code samples using the tokenizer.
        const tokenizerSamples = codeSamples
            .map((code) => tokenizer.tokenize(code))
            .filter((tokens): tokens is string[] => tokens !== null) as (readonly string[])[];

        // Train a Naive Bayes classifier.
        const classifier = new natural.BayesClassifier();
        for (let i = 0; i < tokenizerSamples.length; i++) {
            classifier.addDocument([...tokenizerSamples[i]], labels[i].toString()); // copy ensures immutability
        }
        classifier.train();
        const prediction: string = classifier.classify([...tokenizedSnippet]);
        const result: number = parseInt(prediction, 10);
        if (result === 1) {
            isDetected = true;
            console.log(colors.red(detectedToStringMap[kind]));
        }
    }

    if (!isDetected) {
        console.log(colors.green(notDetectedToStringMap[kind]));
    }
}

// TEST

import { testVulnerability } from './VulnerabilityTest';

const isSkipTest = true;
if (!isSkipTest) {
    testVulnerability();
}