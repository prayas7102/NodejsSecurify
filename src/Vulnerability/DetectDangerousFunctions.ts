import colors from 'colors';

import { Vulnerability, detectedToStringMap, notDetectedToStringMap } from './VulnerabilityTypes';

export function detectDangerousFunctions(node: any, fileContent: string) {
    let detect: boolean = false;
    const dangerousFuncArrayWithDot: string[] = ["setTimeout", "RegExp", "parsedInt", "parsedFloat", "getElementById", "outerHTML", "postMessage", "setRequestHeader", "ExecuteSql", "innerHTML", "eval", "WebSocket", "document.write", "document.evaluate", "window.location", "document.cookie", "sessionStorage.setItem", "JSON.parse", "element.setAttribute"];
    const warningMessages: { [key: string]: string } = {
        parsedInt: "Ensure: Always specify the radix (base) to avoid unexpected results",
        parsedFloat: "Ensure: Always specify the radix (base) to avoid unexpected results",
        RegExp: "Ensure: Regular expression to match only letters",
        setTimeout: "Ensure: Remember to clear the interval when it's no longer needed: clearTimeout(timerId);",
        getElementById: "Ensure: Regular expression to match only letters",
        eval: "Avoid this function",
        innerHTML: "Ensure: It doesn't accept script tags, can cause XSS Attack",
        outerHTML: "Ensure: It doesn't accept script tags, can cause XSS Attack",
        "document.write": "Ensure: Avoid using it to prevent DOM XSS attack",
        "document.evaluate": "Ensure: Avoid using it to prevent Client-side XPath injection",
        "window.location": "Ensure: Avoid using it to navigate to URLs provided by users, can lead to 'Open redirection'",
        "window.open": "Ensure: Can lead to 'Open redirection'",
        "document.cookie": "Ensure: Sanitize or encode cookie data, as it can lead to Cookie manipulation",
        "sessionStorage.setItem": "Ensure: Sanitize and limit data, Can lead to HTML5-storage manipulation",
        "JSON.parse": "Ensure: Be cautious about the source of the JSON data, Can lead to Client-side JSON injection",
        "element.setAttribute": "Ensure: Better to use methods such as addEventListener, as it can lead to DOM-data manipulation (XSS)"
    };
    const fileContentArray: string[] = fileContent.split("\r\n");
    let location: number = 0;
    for (let nodeObj of fileContentArray) {
        location++;
        for (let nodeDangerObj of dangerousFuncArrayWithDot) {
            if (nodeObj.includes(nodeDangerObj)) {
                if (!detect) {
                    console.log(colors.red(detectedToStringMap[Vulnerability.DangerousFunctions]));
                    detect = true;
                }
                const value = `${nodeDangerObj} detected at line: ${location} ${warningMessages[nodeDangerObj as keyof typeof warningMessages]}`;
                console.log("> " + colors.red(value));
            }
        }
    }
    if (!detect) console.log(colors.green(notDetectedToStringMap[Vulnerability.DangerousFunctions]));
    else console.log(colors.yellow("=====> Ignore above errors if you already made changes to your code <====="));

}